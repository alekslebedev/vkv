<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced Examples on vkv</title><link>https://falcosuessgott.github.io/vkv/export/advanced_examples/</link><description>Recent content in Advanced Examples on vkv</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://falcosuessgott.github.io/vkv/export/advanced_examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Compare and highlight the differences using diff</title><link>https://falcosuessgott.github.io/vkv/export/advanced_examples/diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/advanced_examples/diff/</guid><description>vkv can be used to compare secrets across Vault servers or KV engines.
Here is an example using diff, the | indicates the changed entry per line:</description></item><item><title>Generate Vault policies using the template format</title><link>https://falcosuessgott.github.io/vkv/export/advanced_examples/vault_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/advanced_examples/vault_policies/</guid><description>vkv can be used to generate policies from an existing KV path. When using the template output format, all the data is passed to STDOUT as a
map[string][]entry where entry is a struct of
type entry struct { Key string Value interface{} } Which means you can iterate over the map, where the map-key is the secret path and iterate again over the slice of entries in order to access the key and value of the secret (also see assets/template.</description></item><item><title>Show all KV-engines and secrets the using fzf and jq</title><link>https://falcosuessgott.github.io/vkv/export/advanced_examples/fzf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/advanced_examples/fzf/</guid><description>using vault secrets list and a little bit of jq-logic (see assets/fzf.sh) we can get a list of all KV-engines visible for the token. If we pipe this into fzf we can get a handy little preview-app:</description></item></channel></rss>