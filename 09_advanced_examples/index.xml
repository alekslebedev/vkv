<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Advanced examples on vkv</title><link>https://falcosuessgott.github.io/vkv/09_advanced_examples/</link><description>Recent content in Advanced examples on vkv</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://falcosuessgott.github.io/vkv/09_advanced_examples/index.xml" rel="self" type="application/rss+xml"/><item><title>compare KVv2 engines</title><link>https://falcosuessgott.github.io/vkv/09_advanced_examples/diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/09_advanced_examples/diff/</guid><description>vkv can be used to compare secrets across Vault servers or KV engines.
&amp;#34;diff -ty &amp;lt;(vkv export --p=secret --show-values) &amp;lt;(vkv export -p=secret_2 --show-values)&amp;#34; Here is an example using diff, the | indicates the changed entry per line:
Demo</description></item><item><title>scheduled vkv snapshots using Kubernetes</title><link>https://falcosuessgott.github.io/vkv/09_advanced_examples/kubernetes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/09_advanced_examples/kubernetes/</guid><description>vkv comes in container images, which enable you to run scheduled snapshots in a kubernetes cluster.
The idea is to schedule a cronjob which snapshots a vault server and writes the snapshot files to a persistent volume.
Here is a minimum working k3s using local-storage example:
create the volume directories # on a k3s node mkdir -p /data/volume/pv1 chmod 777 /data/volume/pv1 # for testing create a pv apiVersion: v1 kind: PersistentVolume metadata: name: local-pv spec: capacity: storage: 5Gi accessModes: - ReadWriteOnce persistentVolumeReclaimPolicy: Retain storageClassName: local-storage local: path: /data/volumes/pv1 nodeAffinity: required: nodeSelectorTerms: - matchExpressions: - key: kubernetes.</description></item><item><title>browse all KVv2 engines</title><link>https://falcosuessgott.github.io/vkv/09_advanced_examples/fzf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/09_advanced_examples/fzf/</guid><description>using vault secrets list and a little bit of jq-logic, we can get a list of all KV-engines visible for the token.
If we pipe this into fzf we can get a handy little preview-app:
vkv list engines --all --include-ns-prefix | fzf --preview &amp;#39;vkv export -e ${}&amp;#39; Demo</description></item><item><title>encrypt &amp; decrypt using sops</title><link>https://falcosuessgott.github.io/vkv/09_advanced_examples/sops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/09_advanced_examples/sops/</guid><description>In order to store the secret export created by vkv sops can be used. This example shows how to encrypt &amp;amp; decrypt vkv exported secrets using sops and Vaults transit engine:
Prerequisites Install sops Demo export VAULT_ADDR=&amp;#34;https://vault.server&amp;#34; export VAULT_TOKEN=&amp;#34;hvs.XXXX&amp;#34; # enable engine and create encryption key vault secrets enable -path=sops transit vault write sops/keys/vkv type=rsa-4096 # export secrets as yaml and write to file vkv export -p secret --show-values -f=yaml &amp;gt; export.</description></item></channel></rss>