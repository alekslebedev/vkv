<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vkv documentation on vkv</title><link>https://falcosuessgott.github.io/vkv/</link><description>Recent content in vkv documentation on vkv</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://falcosuessgott.github.io/vkv/index.xml" rel="self" type="application/rss+xml"/><item><title>Base</title><link>https://falcosuessgott.github.io/vkv/export/formats/base/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/formats/base/</guid><description>Display the secrets recursively in a handy tree-view.
Required flags vkv --path &amp;lt;path&amp;gt; Optional flags Flag Description Env Default --only-keys show only keys VKV_ONLY_KEYS false --only-paths show only paths VKV_ONLY_PATHS false --show-values don&amp;rsquo;t mask values VKV_SHOW_VALUES false --max-value-length maximum char length of values (set to -1 for disabling) VKV_MAX_VALUE_LENGTH 12 Demo</description></item><item><title>Compare KV engines using diff command</title><link>https://falcosuessgott.github.io/vkv/export/advanced_examples/diff/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/advanced_examples/diff/</guid><description>vkv can be used to compare secrets across Vault servers or KV engines.
&amp;#34;diff -ty &amp;lt;(VKV_PATH=&amp;#39;secret&amp;#39; vkv --show-values) &amp;lt;(VKV_PATH=&amp;#39;secret_2&amp;#39; vkv --show-values)&amp;#34; Here is an example using diff, the | indicates the changed entry per line:
Demo</description></item><item><title>Usage</title><link>https://falcosuessgott.github.io/vkv/export/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/usage/</guid><description>vkv flags can be divided into input, modifying and output format flags.
Input flags Flag Description Env Default -p, --path KVv2 Engine path VKV_PATH -e, --engine-path This flag is only required if your kv-engine contains a /, which is used by vkv internally for splitting the secret paths, vkv will then append the values of the path-flag to the engine path, if specified (&amp;lt;engine-path&amp;gt;/&amp;lt;path&amp;gt;) VKV_ENGINE_PATH Modifying flags Flag Description Env Default --only-keys show only keys VKV_ONLY_KEYS false --only-paths show only paths VKV_ONLY_PATHS false --show-values don&amp;rsquo;t mask values VKV_SHOW_VALUES false --max-value-length maximum char length of values (set to -1 for disabling) VKV_MAX_VALUE_LENGTH 12 --template-file path to a file containing Go-template syntax to render the KV entries VKV_TEMPLATE_FILE --template-string string containing Go-template syntax to render KV entries VKV_TEMPLATE_STRING Output flags Flag Description Env Default -f, --format output format (options: base, yaml, policy, json, export, markdown, template) VKV_FORMAT base ⚠️ A flag always precede its environment variable</description></item><item><title>Usage</title><link>https://falcosuessgott.github.io/vkv/import/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/import/usage/</guid><description>The - in vkv import -, tells vkv do read data via STDIN. The idea of vkv import - is, in order to copy/mirror KV-v2 secrets or complete engines across diferrent Vault Servers or Namespaces, you can simply pipe vkvs output into the vkv import command:
# dont forget to use --show-values, otherwise the secrets will be uploaded masked. vkv -p &amp;lt;source&amp;gt; --show-values -f=yaml | vkv import - -p &amp;lt;destination&amp;gt; Demo A few notes: &amp;lt;source&amp;gt; and &amp;lt;destination&amp;gt; dont have to be the root path of a secret engine, you also specify subpaths and copy them another secret engine.</description></item><item><title>Browse all KV-engines and secrets the using fzf and jq</title><link>https://falcosuessgott.github.io/vkv/export/advanced_examples/fzf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/advanced_examples/fzf/</guid><description>using vault secrets list and a little bit of jq-logic, we can get a list of all KV-engines visible for the token.
If we pipe this into fzf we can get a handy little preview-app:
vault secrets list -format=json | jq -r &amp;#39;to_entries | map(select(.value.type==&amp;#34;kv&amp;#34;)) | from_entries | keys[]&amp;#39; | fzf --preview &amp;#39;vkv -p ${}&amp;#39; Demo</description></item><item><title>JSON</title><link>https://falcosuessgott.github.io/vkv/export/formats/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/formats/json/</guid><description>Print the secrets recursively as JSON
Required flags vkv --path &amp;lt;path&amp;gt; --format=json Optional flags Flag Description Env Default --only-keys show only keys VKV_ONLY_KEYS false --only-paths show only paths VKV_ONLY_PATHS false --show-values don&amp;rsquo;t mask values VKV_SHOW_VALUES false --max-value-length maximum char length of values (set to -1 for disabling) VKV_MAX_VALUE_LENGTH 12 Demo</description></item><item><title>Encrypt &amp; Decrypt vkv output using sops and Vault</title><link>https://falcosuessgott.github.io/vkv/export/advanced_examples/sops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/advanced_examples/sops/</guid><description>In order to store the secret export created by vkv sops can be used. This example shows how to encrypt &amp;amp; decrypt vkv exported secrets using sops and Vaults transit engine:
Prerequisites Install sops Demo export VAULT_ADDR=&amp;#34;https://vault.server&amp;#34; export VAULT_TOKEN=&amp;#34;hvs.XXXX&amp;#34; # enable engine and create encryption key vault secrets enable -path=sops transit vault write sops/keys/vkv type=rsa-4096 # export secrets as yaml and write to file vkv -p secret --show-values -f=yaml &amp;gt; export.</description></item><item><title>YAML</title><link>https://falcosuessgott.github.io/vkv/export/formats/yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/formats/yaml/</guid><description>Print the secrets recursively as YAML
Required flags vkv --path &amp;lt;path&amp;gt; --format=yaml Optional flags Flag Description Env Default --only-keys show only keys VKV_ONLY_KEYS false --only-paths show only paths VKV_ONLY_PATHS false --show-values don&amp;rsquo;t mask values VKV_SHOW_VALUES false --max-value-length maximum char length of values (set to -1 for disabling) VKV_MAX_VALUE_LENGTH 12 Demo</description></item><item><title>Generate Vault policies using the template format</title><link>https://falcosuessgott.github.io/vkv/export/advanced_examples/vault_policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/advanced_examples/vault_policies/</guid><description>Applying the following template-snippet to vkvs template-format we can generate vault policies for each path:
{{ range $path, $data := . }} path &amp;quot;{{ $path }}/*&amp;quot; { capabilities = [ &amp;quot;create&amp;quot;, &amp;quot;read&amp;quot; ] } {{ end }} Demo</description></item><item><title>Markdown</title><link>https://falcosuessgott.github.io/vkv/export/formats/markdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/formats/markdown/</guid><description>Display the secrets recursively as a markdown table
Required flags vkv --path &amp;lt;path&amp;gt; --format=markdown Optional flags Flag Description Env Default --only-keys show only keys VKV_ONLY_KEYS false --only-paths show only paths VKV_ONLY_PATHS false --show-values don&amp;rsquo;t mask values VKV_SHOW_VALUES false --max-value-length maximum char length of values (set to -1 for disabling) VKV_MAX_VALUE_LENGTH 12 Demo</description></item><item><title>Token Policy Matrix</title><link>https://falcosuessgott.github.io/vkv/export/formats/token_policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/formats/token_policy/</guid><description>Print the current tokens policy capabilities in a matrix.
Requires the update capabilities on /sys/capabilities-self, which is set by the default policy
Required flags vkv --path &amp;lt;path&amp;gt; --format=policy Demo</description></item><item><title>Export</title><link>https://falcosuessgott.github.io/vkv/export/formats/export/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/formats/export/</guid><description>Prints secrets in export &amp;lt;KEY&amp;gt;=&amp;lt;VALUE&amp;gt; format. Can be used with eval for loading vkv output in your shell.
Required flags vkv --path &amp;lt;path&amp;gt; --format=export Demo</description></item><item><title>Template</title><link>https://falcosuessgott.github.io/vkv/export/formats/template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://falcosuessgott.github.io/vkv/export/formats/template/</guid><description>Template the secrets using Go-Template-Syntax.
When using the template output format, all the data is passed to STDOUT as a
map[string][]entry where entry is a struct of
type entry struct { Key string Value interface{} } Also see Generate Vault Policies from a KV engine.
Required flags vkv --path &amp;lt;path&amp;gt; --format=template Optional flags Flag Description Env Default --template-file path to a file containing Go-template syntax to render the KV entries VKV_TEMPLATE_FILE --template-string string containing Go-template syntax to render KV entries VKV_TEMPLATE_STRING Demo</description></item></channel></rss>